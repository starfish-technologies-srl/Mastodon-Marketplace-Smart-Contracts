/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace TipsyERC721Marketplace {
  export type OrderStruct = {
    seller: AddressLike;
    tokenId: BigNumberish;
    nftContract: AddressLike;
    price: BigNumberish;
    listIndex: BigNumberish;
  };

  export type OrderStructOutput = [
    seller: string,
    tokenId: bigint,
    nftContract: string,
    price: bigint,
    listIndex: bigint
  ] & {
    seller: string;
    tokenId: bigint;
    nftContract: string;
    price: bigint;
    listIndex: bigint;
  };

  export type OrderKeyStruct = {
    nftContract: AddressLike;
    tokenId: BigNumberish;
  };

  export type OrderKeyStructOutput = [nftContract: string, tokenId: bigint] & {
    nftContract: string;
    tokenId: bigint;
  };
}

export interface TipsyERC721MarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ERC721_Interface"
      | "addWhitelistAddress"
      | "buy"
      | "cancelListing"
      | "changeDevAddress"
      | "dev"
      | "erc20"
      | "getOrderByIndex"
      | "getOrderKeys"
      | "getOrders"
      | "orderByAssetId"
      | "orderListContains"
      | "orderListSize"
      | "owner"
      | "removeWhitelistAddress"
      | "renounceOwnership"
      | "saleFeePerc"
      | "sell"
      | "setSaleFee"
      | "transferOwnership"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TokenCancelled"
      | "TokenListed"
      | "TokenSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ERC721_Interface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDevAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOrderByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrders",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderByAssetId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderListContains",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderListSize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleFeePerc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC721_Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDevAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderByAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderListContains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderListSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleFeePerc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSaleFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCancelledEvent {
  export type InputTuple = [
    assetId: BigNumberish,
    seller: AddressLike,
    nftAddress: AddressLike
  ];
  export type OutputTuple = [
    assetId: bigint,
    seller: string,
    nftAddress: string
  ];
  export interface OutputObject {
    assetId: bigint;
    seller: string;
    nftAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenListedEvent {
  export type InputTuple = [
    assetId: BigNumberish,
    seller: AddressLike,
    nftAddress: AddressLike,
    priceInWei: BigNumberish
  ];
  export type OutputTuple = [
    assetId: bigint,
    seller: string,
    nftAddress: string,
    priceInWei: bigint
  ];
  export interface OutputObject {
    assetId: bigint;
    seller: string;
    nftAddress: string;
    priceInWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSoldEvent {
  export type InputTuple = [
    order: TipsyERC721Marketplace.OrderStruct,
    newOwner: AddressLike
  ];
  export type OutputTuple = [
    order: TipsyERC721Marketplace.OrderStructOutput,
    newOwner: string
  ];
  export interface OutputObject {
    order: TipsyERC721Marketplace.OrderStructOutput;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TipsyERC721Marketplace extends BaseContract {
  connect(runner?: ContractRunner | null): TipsyERC721Marketplace;
  waitForDeployment(): Promise<this>;

  interface: TipsyERC721MarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ERC721_Interface: TypedContractMethod<[], [string], "view">;

  addWhitelistAddress: TypedContractMethod<
    [whitelistAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  buy: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [TipsyERC721Marketplace.OrderStructOutput],
    "nonpayable"
  >;

  cancelListing: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeDevAddress: TypedContractMethod<
    [newDev: AddressLike],
    [void],
    "nonpayable"
  >;

  dev: TypedContractMethod<[], [string], "view">;

  erc20: TypedContractMethod<[], [string], "view">;

  getOrderByIndex: TypedContractMethod<
    [_index: BigNumberish],
    [TipsyERC721Marketplace.OrderStructOutput],
    "view"
  >;

  getOrderKeys: TypedContractMethod<
    [],
    [TipsyERC721Marketplace.OrderKeyStructOutput[]],
    "view"
  >;

  getOrders: TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [TipsyERC721Marketplace.OrderStructOutput[]],
    "view"
  >;

  orderByAssetId: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        seller: string;
        tokenId: bigint;
        nftContract: string;
        price: bigint;
        listIndex: bigint;
      }
    ],
    "view"
  >;

  orderListContains: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  orderListSize: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeWhitelistAddress: TypedContractMethod<
    [whitelistAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  saleFeePerc: TypedContractMethod<[], [bigint], "view">;

  sell: TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSaleFee: TypedContractMethod<
    [newsaleFeePerc: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelist: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ERC721_Interface"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addWhitelistAddress"
  ): TypedContractMethod<[whitelistAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [TipsyERC721Marketplace.OrderStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeDevAddress"
  ): TypedContractMethod<[newDev: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dev"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOrderByIndex"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [TipsyERC721Marketplace.OrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderKeys"
  ): TypedContractMethod<
    [],
    [TipsyERC721Marketplace.OrderKeyStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrders"
  ): TypedContractMethod<
    [start: BigNumberish, end: BigNumberish],
    [TipsyERC721Marketplace.OrderStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "orderByAssetId"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, bigint, string, bigint, bigint] & {
        seller: string;
        tokenId: bigint;
        nftContract: string;
        price: bigint;
        listIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "orderListContains"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "orderListSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeWhitelistAddress"
  ): TypedContractMethod<[whitelistAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "saleFeePerc"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sell"
  ): TypedContractMethod<
    [nftContract: AddressLike, tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSaleFee"
  ): TypedContractMethod<[newsaleFeePerc: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenCancelled"
  ): TypedContractEvent<
    TokenCancelledEvent.InputTuple,
    TokenCancelledEvent.OutputTuple,
    TokenCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TokenListed"
  ): TypedContractEvent<
    TokenListedEvent.InputTuple,
    TokenListedEvent.OutputTuple,
    TokenListedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSold"
  ): TypedContractEvent<
    TokenSoldEvent.InputTuple,
    TokenSoldEvent.OutputTuple,
    TokenSoldEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenCancelled(uint256,address,address)": TypedContractEvent<
      TokenCancelledEvent.InputTuple,
      TokenCancelledEvent.OutputTuple,
      TokenCancelledEvent.OutputObject
    >;
    TokenCancelled: TypedContractEvent<
      TokenCancelledEvent.InputTuple,
      TokenCancelledEvent.OutputTuple,
      TokenCancelledEvent.OutputObject
    >;

    "TokenListed(uint256,address,address,uint256)": TypedContractEvent<
      TokenListedEvent.InputTuple,
      TokenListedEvent.OutputTuple,
      TokenListedEvent.OutputObject
    >;
    TokenListed: TypedContractEvent<
      TokenListedEvent.InputTuple,
      TokenListedEvent.OutputTuple,
      TokenListedEvent.OutputObject
    >;

    "TokenSold(tuple,address)": TypedContractEvent<
      TokenSoldEvent.InputTuple,
      TokenSoldEvent.OutputTuple,
      TokenSoldEvent.OutputObject
    >;
    TokenSold: TypedContractEvent<
      TokenSoldEvent.InputTuple,
      TokenSoldEvent.OutputTuple,
      TokenSoldEvent.OutputObject
    >;
  };
}
