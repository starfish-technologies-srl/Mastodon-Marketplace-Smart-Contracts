/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IMastodonMarketplace {
  export type OrderStruct = {
    nftContract: AddressLike;
    seller: AddressLike;
    tokenId: BigNumberish;
    supply: BigNumberish;
    payoutToken: AddressLike;
    price: BigNumberish;
  };

  export type OrderStructOutput = [
    nftContract: string,
    seller: string,
    tokenId: bigint,
    supply: bigint,
    payoutToken: string,
    price: bigint
  ] & {
    nftContract: string;
    seller: string;
    tokenId: bigint;
    supply: bigint;
    payoutToken: string;
    price: bigint;
  };

  export type InputOrderERC1155Struct = {
    nftContract: AddressLike;
    tokenId: BigNumberish;
    supply: BigNumberish;
    payoutToken: AddressLike;
    price: BigNumberish;
  };

  export type InputOrderERC1155StructOutput = [
    nftContract: string,
    tokenId: bigint,
    supply: bigint,
    payoutToken: string,
    price: bigint
  ] & {
    nftContract: string;
    tokenId: bigint;
    supply: bigint;
    payoutToken: string;
    price: bigint;
  };

  export type InputOrderERC721Struct = {
    nftContract: AddressLike;
    tokenId: BigNumberish;
    payoutToken: AddressLike;
    price: BigNumberish;
  };

  export type InputOrderERC721StructOutput = [
    nftContract: string,
    tokenId: bigint,
    payoutToken: string,
    price: bigint
  ] & {
    nftContract: string;
    tokenId: bigint;
    payoutToken: string;
    price: bigint;
  };
}

export interface IMastodonMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buy"
      | "delistERC1155"
      | "delistERC721"
      | "listERC1155"
      | "listERC721"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Buy" | "Delist" | "List"): EventFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC1155",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delistERC721",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC1155",
    values: [IMastodonMarketplace.InputOrderERC1155Struct]
  ): string;
  encodeFunctionData(
    functionFragment: "listERC721",
    values: [IMastodonMarketplace.InputOrderERC721Struct]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delistERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delistERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listERC721", data: BytesLike): Result;
}

export namespace BuyEvent {
  export type InputTuple = [
    arg0: BigNumberish,
    arg1: IMastodonMarketplace.OrderStruct
  ];
  export type OutputTuple = [
    arg0: bigint,
    arg1: IMastodonMarketplace.OrderStructOutput
  ];
  export interface OutputObject {
    arg0: bigint;
    arg1: IMastodonMarketplace.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelistEvent {
  export type InputTuple = [
    arg0: BigNumberish,
    arg1: IMastodonMarketplace.OrderStruct
  ];
  export type OutputTuple = [
    arg0: bigint,
    arg1: IMastodonMarketplace.OrderStructOutput
  ];
  export interface OutputObject {
    arg0: bigint;
    arg1: IMastodonMarketplace.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListEvent {
  export type InputTuple = [
    arg0: BigNumberish,
    arg1: IMastodonMarketplace.OrderStruct
  ];
  export type OutputTuple = [
    arg0: bigint,
    arg1: IMastodonMarketplace.OrderStructOutput
  ];
  export interface OutputObject {
    arg0: bigint;
    arg1: IMastodonMarketplace.OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMastodonMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): IMastodonMarketplace;
  waitForDeployment(): Promise<this>;

  interface: IMastodonMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buy: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [void],
    "payable"
  >;

  delistERC1155: TypedContractMethod<
    [arg0: BigNumberish],
    [void],
    "nonpayable"
  >;

  delistERC721: TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;

  listERC1155: TypedContractMethod<
    [order: IMastodonMarketplace.InputOrderERC1155Struct],
    [void],
    "nonpayable"
  >;

  listERC721: TypedContractMethod<
    [order: IMastodonMarketplace.InputOrderERC721Struct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "delistERC1155"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delistERC721"
  ): TypedContractMethod<[arg0: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "listERC1155"
  ): TypedContractMethod<
    [order: IMastodonMarketplace.InputOrderERC1155Struct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listERC721"
  ): TypedContractMethod<
    [order: IMastodonMarketplace.InputOrderERC721Struct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Buy"
  ): TypedContractEvent<
    BuyEvent.InputTuple,
    BuyEvent.OutputTuple,
    BuyEvent.OutputObject
  >;
  getEvent(
    key: "Delist"
  ): TypedContractEvent<
    DelistEvent.InputTuple,
    DelistEvent.OutputTuple,
    DelistEvent.OutputObject
  >;
  getEvent(
    key: "List"
  ): TypedContractEvent<
    ListEvent.InputTuple,
    ListEvent.OutputTuple,
    ListEvent.OutputObject
  >;

  filters: {
    "Buy(uint256,tuple)": TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;
    Buy: TypedContractEvent<
      BuyEvent.InputTuple,
      BuyEvent.OutputTuple,
      BuyEvent.OutputObject
    >;

    "Delist(uint256,tuple)": TypedContractEvent<
      DelistEvent.InputTuple,
      DelistEvent.OutputTuple,
      DelistEvent.OutputObject
    >;
    Delist: TypedContractEvent<
      DelistEvent.InputTuple,
      DelistEvent.OutputTuple,
      DelistEvent.OutputObject
    >;

    "List(uint256,tuple)": TypedContractEvent<
      ListEvent.InputTuple,
      ListEvent.OutputTuple,
      ListEvent.OutputObject
    >;
    List: TypedContractEvent<
      ListEvent.InputTuple,
      ListEvent.OutputTuple,
      ListEvent.OutputObject
    >;
  };
}
